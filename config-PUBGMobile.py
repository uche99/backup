import struct,os


# level available 4,5,6,7
FPSLevel=7 #level info 4=30fps 5=40fps 6=60fps 7=90fps

bin8 = lambda x : ''.join(reversed( [str((x >> i) & 1) for i in range(8)] ) )

maps=[
 '00101111','01110011','01100100', 
 '01100011', '01100001', '01110010', 
 '01100100', '00101111', '01000001', 
 '01101110', '01100100', '01110010', 
 '01101111', '01101001', '01100100', 
 '00101111', '01100100', '01100001', 
 '01110100', '01100001', '00101111', 
 '01100011', '01101111', '01101101', 
 '00101110', '01110100', '01100101', 
 '01101110', '01100011', '01100101', 
 '01101110', '01110100', '00101110', 
 '01101001', '01100111', '00101111', 
 '01100110', '01101001', '01101100', 
 '01100101', '01110011', '00101111', 
 '01010101', '01000101', '00110100', 
 '01000111', '01100001', '01101101', 
 '01100101', '00101111', '01010011', 
 '01101000', '01100001', '01100100', 
 '01101111', '01110111', '01010100', 
 '01110010', '01100001', '01100011', 
 '01101011', '01100101', '01110010', 
 '01000101', '01111000', '01110100', 
 '01110010', '01100001', '00101111', 
 '01010011', '01101000', '01100001', 
 '01100100', '01101111', '01110111', 
 '01010100', '01110010', '01100001', 
 '01100011', '01101011', '01100101', 
 '01110010', '01000101', '01111000', 
 '01110100', '01110010', '01100001', 
 '00101111', '01010011', '01100001', 
 '01110110', '01100101', '01100100', 
 '00101111', '01010011', '01100001', 
 '01110110', '01100101', '01000111', 
 '01100001', '01101101', '01100101', 
 '01110011', '00101111', '01000001', 
 '01100011', '01110100', '01101001', 
 '01110110', '01100101', '00101110', 
 '01110011', '01100001', '01110110']
def settings(path,value):
  if not os.path.isfile(path):
      print 'bubg mobile not install'
      return
  fp=open(path,'rb+')
  data=fp.read()
  result=data.find('FPS')
  if result!=-1:
    fp.seek(result)
    a,b,c,d,e,f,g,h,i,j=config=struct.unpack("<8sh3B11s2iHi",fp.read(38))
    if a=="FPSLevel":
        if b==3072:
            if f=="IntProperty":
                sets=struct.pack("<8sh3B11s2iHi",a,b,c,d,e,f,g,h,i,value)
                fp.seek(result)
                fp.write(sets)
                fp.close()
                print "settings to level %s success"%(value)
                
conv=[int(x,2) for x in maps]
settings(''.join([chr(i) for i in conv]),FPSLevel)
